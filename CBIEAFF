local Nigga = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local TextButton = Instance.new("TextButton")
local UICorner_2 = Instance.new("UICorner")

--Properties:
Nigga.Name = "Nigga"
Nigga.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")  -- Better placement for GUI
Nigga.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = Nigga
Frame.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.113149844, 0, 0.089430891, 0)
Frame.Size = UDim2.new(0, 140, 0, 61)
Frame.Active = true
Frame.Draggable = true

UICorner.Parent = Frame

TextButton.Parent = Frame  -- Fixed parenting
TextButton.BackgroundColor3 = Color3.fromRGB(131, 131, 131)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.05, 0, 0.1, 0)  -- Adjusted position
TextButton.Size = UDim2.new(0, 125, 0, 45)  -- Better fit
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "BSODA (V)"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextSize = 28.000  -- Smaller size for better fit

-- Create the executeInfAction function separately
local function executeInfAction()
    local player = game:GetService("Players").LocalPlayer

    -- Wait for character to load
    if not player.Character then
        player.CharacterAdded:Wait()
    end
    local character = player.Character

    -- Try to find HumanoidRootPart or alternative
    local rootPart = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChildWhichIsA("BasePart")

    if not rootPart then
        warn("Could not find any root part in character!")
        return
    end

    local currentCFrame = rootPart.CFrame
    print("Player CFrame captured:", currentCFrame)

    -- Search for CharScript in different locations
    local charScript = 
        workspace:FindFirstChild(player.Name) and workspace[player.Name]:FindFirstChild("CharScript") or
        character:FindFirstChild("CharScript") or
        player:FindFirstChild("CharScript") or
        player.PlayerGui:FindFirstChild("CharScript")

    if not charScript then
        warn("CharScript not found in any common locations!")
        return
    end

    print("CharScript found at:", charScript:GetFullName())

    -- Try to find Remotes
    local remotes = charScript:FindFirstChild("Remotes")
    if not remotes then
        warn("Remotes folder not found in CharScript")
        return
    end

    -- Try to find ItemRemote
    local itemRemote = remotes:FindFirstChild("ItemRemote")
    if not itemRemote then
        warn("ItemRemote not found in Remotes")
        -- Try alternative names
        local alternatives = {"ItemEvent", "UseItem", "ItemHandler"}
        for _, name in ipairs(alternatives) do
            itemRemote = remotes:FindFirstChild(name)
            if itemRemote then
                print("Found alternative remote:", name)
                break
            end
        end
        
        if not itemRemote then
            warn("No valid remote found in Remotes")
            return
        end
    end

    -- Try different firing methods
    print("Attempting to fire remote...")
    local success, err = pcall(function()
        -- Method 1: Original format
        itemRemote:FireServer(table.unpack({
            [1] = 1,
            [2] = currentCFrame
        }))
    end)

    if not success then
        print("Method 1 failed:", err)
        
        -- Method 2: Arguments without table
        success, err = pcall(function()
            itemRemote:FireServer(1, currentCFrame)
        end)
        
        if not success then
            print("Method 2 failed:", err)
            
            -- Method 3: Different argument structure
            success, err = pcall(function()
                itemRemote:FireServer({
                    itemId = 1,
                    position = currentCFrame
                })
            end)
            
            if success then
                print("Success with method 3!")
            else
                print("Method 3 failed:", err)
                warn("All remote firing methods failed")
            end
        else
            print("Success with method 2!")
        end
    else
        print("Success with method 1!")
    end
end

-- Connect button to the function
TextButton.MouseButton1Down:Connect(executeInfAction)

-- Add V key functionality
local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.V and not gameProcessed then
        executeInfAction()
    end
end)

UICorner_2.Parent = TextButton
